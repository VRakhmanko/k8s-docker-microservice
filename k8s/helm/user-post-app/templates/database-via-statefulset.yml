---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.namespaceName }}
  name: post-postgresql-db
spec:
  serviceName: post-postgresql-db-service
  selector:
    matchLabels:
      app: post-postgresql-db
  replicas: 1
  template:
    metadata:
      labels:
        app: post-postgresql-db
    spec:
      volumes:
        - name: post-postgresql-db-config
          configMap:
            name: post-postgresql-db-config
      containers:
        - name: post-postgresql-db
          image: postgres:15-alpine3.17
          volumeMounts:
            - name: post-postgresql-db-disk
              mountPath: /var/lib/postgresql/data

            - mountPath: /docker-entrypoint-initdb.d
              name: post-postgresql-db-config
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: post-postgresql-db-config
          env:
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: post-postgresql-db-secret
                  key: post-db-name
                  optional: false
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: post-postgresql-db-secret
                  key: post-db-user
                  optional: false
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: post-postgresql-db-secret
                  key: post-db-password
                  optional: false
          startupProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 20
          readinessProbe:
            tcpSocket:
              port: 5432
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            initialDelaySeconds: 20
          livenessProbe:
            tcpSocket:
              port: 5432
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
            initialDelaySeconds: 20
            terminationGracePeriodSeconds: 5
  # Volume Claim
  volumeClaimTemplates:
    - metadata:
        name: post-postgresql-db-disk
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
---
# PostgreSQL StatefulSet Service
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.namespaceName }}
  name: post-postgres
spec:
  selector:
    app: post-postgresql-db
  type: ClusterIP
  ports:
    - port: 15432
      targetPort: 5432

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespaceName }}
  name: post-postgresql-db-config
  labels:
    app: post-postgresql-db
    current-date: {{ include "user-post-app.current-date" . }}
    version: {{ include "user-post-app.version" . }}
data:
  PGDATA: /data/pgdata

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: {{ .Values.namespaceName }}
  name: user-postgresql-db
spec:
  serviceName: user-postgresql-db-service
  selector:
    matchLabels:
      app: user-postgresql-db
  replicas: 1
  template:
    metadata:
      labels:
        app: user-postgresql-db
    spec:
      volumes:
        - name: user-postgresql-db-config
          configMap:
            name: user-postgresql-db-config
      containers:
        - name: user-postgresql-db
          image: postgres:15-alpine3.17
          volumeMounts:
            - name: user-postgresql-db-disk
              mountPath: /var/lib/postgresql/data

            - mountPath: /docker-entrypoint-initdb.d
              name: user-postgresql-db-config
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: user-postgresql-db-config
            - secretRef:
                name: user-postgresql-db-secret
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"
            initialDelaySeconds: 20
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
            successThreshold: 1
            initialDelaySeconds: 20
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "${POSTGRES_USER}" -d "${POSTGRES_DB}"
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
            successThreshold: 1
            initialDelaySeconds: 20
            terminationGracePeriodSeconds: 2
  # Volume Claim
  volumeClaimTemplates:
    - metadata:
        name: user-postgresql-db-disk
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 2Gi
---
# PostgreSQL StatefulSet Service
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.namespaceName }}
  name: user-postgres
spec:
  selector:
    app: user-postgresql-db
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Values.namespaceName }}
  name: user-postgresql-db-config
  labels:
    app: user-postgresql-db
    current-date: {{ include "user-post-app.current-date" . }}
    version: {{ include "user-post-app.version" . }}
data:
  PGDATA: /data/pgdata
  init.sql: |
    create table if not exists users
    (
        id              integer           not null
            primary key
            constraint users_id_check
                check (id >= 1),
        amount_of_posts integer default 0 not null,
        username        varchar(255)      not null
    );

    insert into users(id, amount_of_posts, username)
    values (10, 10, 'Sergei'),
           (20, 20, 'Evgenii'),
           (30, 30, 'Slava');